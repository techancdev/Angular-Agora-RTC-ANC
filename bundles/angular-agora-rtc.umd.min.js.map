{"version":3,"sources":["ng://angular-agora-rtc/lib/AgoraConfig.ts","ng://angular-agora-rtc/lib/angular-agora-rtc.service.ts","ng://angular-agora-rtc/lib/agora-local.component.ts","ng://angular-agora-rtc/lib/angular-agora-rtc.module.ts","ng://angular-agora-rtc/lib/AgoraClient.ts","ng://angular-agora-rtc/lib/Stream.ts","ng://angular-agora-rtc/lib/Device.ts"],"names":["AgoraConfig","AngularAgoraRtcService","config","this","checkSystemRequirements","getDevices","logger","prototype","AgoraRTC.checkSystemRequirements","AgoraRTC.getDevices","devices","audioDevices","filter","device","kind","deviceId","videoDevices","_this","createClient","mode","client","AgoraRTC.createClient","init","AppID","createStream","streamID","audio","cameraId","microphoneId","video","screen","AgoraRTC.createStream","type","message","AgoraRTC.Logger","error","warning","info","debug","Injectable","args","providedIn","decorators","Inject","AgoraLocalComponent","agoraService","startCall","activeCall","join","uid","localStream","setVideoProfile","subscribeToStreams","on","console","log","play","publish","err","evt","reason","renewChannelKey","stream","subscribe","remoteCalls","includes","getId","push","setTimeout","stop","call","leave","document","getElementById","innerHTML","toggleAudio","audioEnabled","enableAudio","disableAudio","toggleVideo","videoEnabled","enableVideo","disableVideo","Component","selector","template","styles","AngularAgoraRtcModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","declarations","exports","AgoraClient","Stream","Device"],"mappings":"2XAAA,IAAAA,iBCAAC,EAAA,WAgBE,SAAAA,EAC4BC,GAAAC,KAAAD,OAAAA,EAErBC,KAAKC,0BAGRD,KAAKE,aAFLF,KAAKG,OAAO,QAAS,mCAMzBL,EAAAM,UAAAH,wBAAA,WACE,OAAOI,EAAAA,2BAGDP,EAAAM,UAAAF,iCACNI,EAAAA,WAAoB,SAACC,GACnB,IAAIC,EAAeD,EAAQE,OAAO,SAAAC,GAChC,MAAuB,eAAhBA,EAAOC,MAA6C,YAApBD,EAAOE,WAE5CC,EAAeN,EAAQE,OAAO,SAAAC,GAChC,MAAuB,eAAhBA,EAAOC,MAA6C,YAApBD,EAAOE,WAEhDE,EAAKN,aAAeA,EACpBM,EAAKD,aAAeA,KAIxBf,EAAAM,UAAAW,aAAA,SAAaC,QAAA,IAAAA,IAAAA,EAAA,WACVhB,KAAKiB,OAASC,EAAAA,aAAsB,CAAEF,KAAMA,IAC5ChB,KAAKiB,OAAOE,KAAKnB,KAAKD,OAAOqB,QAGhCtB,EAAAM,UAAAiB,aAAA,SAAaC,EAAeC,EAAgBC,EAAkDC,EAAsDC,EAAgBC,GAClK,YAD0C,IAAAH,IAAAA,EAAmBxB,KAAKa,aAAa,GAAGD,eAAU,IAAAa,IAAAA,EAAuBzB,KAAKQ,aAAa,GAAGI,UACjIgB,EAAAA,aAAsB,CAACN,SAAQA,EAAEC,MAAKA,EAAEC,SAAQA,EAAEC,aAAYA,EAAEC,MAAKA,EAAEC,OAAMA,KAGtF7B,EAAAM,UAAAD,OAAA,SAAO0B,EAAcC,GACnB,OAAQD,GACN,IAAK,QACHE,EAAAA,OAAgBC,MAAMF,GACtB,MACF,IAAK,UACHC,EAAAA,OAAgBE,QAAQH,GACxB,MACF,IAAK,OACHC,EAAAA,OAAgBG,KAAKJ,GACrB,MACF,IAAK,QACHC,EAAAA,OAAgBI,MAAML,GACtB,MACF,QACEC,EAAAA,OAAgBC,MAAMF,yBA7D7BM,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAJLzC,EAAW0C,WAAA,CAAA,CAAAV,KAcfW,EAAAA,OAAMH,KAAA,CAAC,wIAjBZ,GCAAI,EAAA,WAsCE,SAAAA,EACUC,GAAA1C,KAAA0C,aAAAA,mBAPY,qBACE,qBACA,mBAEL,GAKjB1C,KAAK0C,aAAa3B,sBAGpB0B,EAAArC,UAAAuC,UAAA,WAAA,IAAA7B,EAAAd,KACEA,KAAK4C,YAAa,EAClB5C,KAAK0C,aAAazB,OAAO4B,KAAK,KAAM,OAAQ,KAAM,SAACC,GACjDhC,EAAKiC,YAAcjC,EAAK4B,aAAarB,aAAayB,GAAK,EAAM,KAAM,MAAM,GAAM,GAC/EhC,EAAKiC,YAAYC,gBAAgB,UACjClC,EAAKmC,wBAIDR,EAAArC,UAAA6C,yCACNjD,KAAK+C,YAAYG,GAAG,gBAAiB,WACnCC,QAAQC,IAAI,mBAGdpD,KAAK+C,YAAYG,GAAG,eAAgB,WAClCC,QAAQC,IAAI,kBAGdpD,KAAK+C,YAAY5B,KAAK,WACpBgC,QAAQC,IAAI,6BACZtC,EAAKiC,YAAYM,KAAK,eACtBvC,EAAK4B,aAAazB,OAAOqC,QAAQxC,EAAKiC,YAAa,SAAUQ,GAC3DJ,QAAQC,IAAI,+BAAiCG,KAE/CzC,EAAK4B,aAAazB,OAAOiC,GAAG,mBAAoB,SAAUM,GACxDL,QAAQC,IAAI,wCAEb,SAAUG,GACXJ,QAAQC,IAAI,sBAAuBG,KAGrCvD,KAAK0C,aAAazB,OAAOiC,GAAG,QAAS,SAACK,GACpCJ,QAAQC,IAAI,iBAAkBG,EAAIE,QACf,wBAAfF,EAAIE,QACN3C,EAAK4B,aAAazB,OAAOyC,gBAAgB,GAAI,WAC3CP,QAAQC,IAAI,mCACX,SAACG,GACFJ,QAAQC,IAAI,6BAA8BG,OAKhDvD,KAAK0C,aAAazB,OAAOiC,GAAG,eAAgB,SAACM,GAC3C,IAAMG,EAASH,EAAIG,OACnB7C,EAAK4B,aAAazB,OAAO2C,UAAUD,EAAQ,SAACJ,GAC1CJ,QAAQC,IAAI,0BAA2BG,OAI3CvD,KAAK0C,aAAazB,OAAOiC,GAAG,oBAAqB,SAACM,GAChD,IAAMG,EAASH,EAAIG,OACd7C,EAAK+C,YAAYC,SAAS,eAAeH,EAAOI,UAAYjD,EAAK+C,YAAYG,KAAK,eAAeL,EAAOI,SAC7GE,WAAW,WAAM,OAAAN,EAAON,KAAK,eAAeM,EAAOI,UAAY,OAGjE/D,KAAK0C,aAAazB,OAAOiC,GAAG,iBAAkB,SAACM,GAC7C,IAAMG,EAASH,EAAIG,OACnBA,EAAOO,OACPpD,EAAK+C,YAAc/C,EAAK+C,YAAYpD,OAAO,SAAA0D,GAAQ,OAAAA,IAAS,gBAAgBR,EAAOI,UACnFZ,QAAQC,IAAI,4BAA4BO,EAAOI,WAGjD/D,KAAK0C,aAAazB,OAAOiC,GAAG,aAAc,SAACM,GACzC,IAAMG,EAASH,EAAIG,OACfA,IACFA,EAAOO,OACPpD,EAAK+C,YAAc/C,EAAK+C,YAAYpD,OAAO,SAAA0D,GAAQ,OAAAA,IAAS,gBAAgBR,EAAOI,UACnFZ,QAAQC,IAAOI,EAAIV,IAAG,+BAI5BL,EAAArC,UAAAgE,MAAA,WAAA,IAAAtD,EAAAd,KACEA,KAAK0C,aAAazB,OAAOmD,MAAM,WAC7BtD,EAAK8B,YAAa,EAClByB,SAASC,eAAe,eAAeC,UAAY,GACnDpB,QAAQC,IAAI,gCACX,SAACG,GACFJ,QAAQC,IAAI,2BAIhBX,EAAArC,UAAAoE,YAAA,WACExE,KAAKyE,cAAgBzE,KAAKyE,aACtBzE,KAAKyE,aAAczE,KAAK+C,YAAY2B,cACnC1E,KAAK+C,YAAY4B,gBAGxBlC,EAAArC,UAAAwE,YAAA,WACE5E,KAAK6E,cAAgB7E,KAAK6E,aACtB7E,KAAK6E,aAAc7E,KAAK+C,YAAY+B,cACnC9E,KAAK+C,YAAYgC,oCAlIzBC,EAAAA,UAAS3C,KAAA,CAAC,CACT4C,SAAU,YACVC,SAAU,u6BAsBVC,OAAQ,CAAC,ioBA3BFrF,OADT,GCAAsF,EAAA,gCAcSA,EAAAC,QAAP,SAAetF,GACb,MAAO,CACLuF,SAAUF,EACVG,UAAW,CAACzF,EAAwB,CAAC0F,QAAS,SAAUC,SAAU1F,0BAXvE2F,EAAAA,SAAQrD,KAAA,CAAC,CACRsD,QAAS,CACPC,EAAAA,cAEFC,aAAc,CAACpD,GACfqD,QAAS,CAACrD,SAXZ,GCAAsD,iBCAAC,iBCAAC","sourcesContent":["export class AgoraConfig{\n    AppID:string;\n}","import { Injectable, Inject } from '@angular/core';\nimport * as AgoraRTC from 'agora-rtc-sdk';\nimport { Subject, BehaviorSubject } from 'rxjs';\nimport { AgoraConfig } from './AgoraConfig';\nimport { AgoraClient } from './AgoraClient';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularAgoraRtcService {\n\n  public audioDevices: any[];\n  public videoDevices: any[];\n\n  public client: AgoraClient;\n\n  constructor(\n    @Inject('config') private config:AgoraConfig\n  ) {\n    if (!this.checkSystemRequirements()) {\n      this.logger('error', 'Web RTC is not supported');\n    } else{\n      this.getDevices();\n    }\n  }\n\n  checkSystemRequirements() {\n    return AgoraRTC.checkSystemRequirements();\n  }\n\n  private getDevices() {\n    AgoraRTC.getDevices((devices) => {\n      let audioDevices = devices.filter(device => {\n        return device.kind === 'audioinput' && device.deviceId !== 'default'\n      });\n      let videoDevices = devices.filter(device => {\n        return device.kind === 'videoinput' && device.deviceId !== 'default'\n      });\n      this.audioDevices = audioDevices;\n      this.videoDevices = videoDevices;\n    });\n  }\n\n  createClient(mode: string = 'interop') {\n     this.client = AgoraRTC.createClient({ mode: mode });\n     this.client.init(this.config.AppID);\n  }\n\n  createStream(streamID: any, audio: boolean, cameraId: string = this.videoDevices[0].deviceId, microphoneId: string = this.audioDevices[0].deviceId, video: boolean, screen: boolean) {\n    return AgoraRTC.createStream({streamID, audio, cameraId, microphoneId, video, screen});\n  }\n\n  logger(type: string, message: string) {\n    switch (type) {\n      case 'error':\n        AgoraRTC.Logger.error(message);\n        break;\n      case 'warning':\n        AgoraRTC.Logger.warning(message);\n        break;\n      case 'info':\n        AgoraRTC.Logger.info(message);\n        break;\n      case 'debug':\n        AgoraRTC.Logger.debug(message);\n        break;\n      default:\n        AgoraRTC.Logger.error(message);\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { AngularAgoraRtcService } from './angular-agora-rtc.service';\nimport { Stream } from './Stream';\n\n@Component({\n  selector: 'agora-rtc',\n  template: `<div class=\"video-container\">\n\t<div class=\"call-container\">\n\t</div>\n\t<div class=\"agora_local\">\n\t\t<div class=\"video-buttons\">\n\t\t\t<i class=\"startCall material-icons\" (click)=\"startCall()\" *ngIf=\"!activeCall\">videocam</i>\n\t\t\t<ng-container *ngIf=\"activeCall\">\n\t\t\t\t<i class=\"endCall material-icons\" (click)=\"leave()\" *ngIf=\"activeCall\">phone</i>\n\n\t\t\t\t<i class=\"mic material-icons\" (click)=\"toggleAudio()\" *ngIf=\"audioEnabled\">mic</i>\n\t\t\t\t<i class=\"mic material-icons\" (click)=\"toggleAudio()\" *ngIf=\"!audioEnabled\">mic_off</i>\n\n\t\t\t\t<i class=\"mic material-icons\" (click)=\"toggleVideo()\" *ngIf=\"videoEnabled\">videocam</i>\n\t\t\t\t<i class=\"mic material-icons\" (click)=\"toggleVideo()\" *ngIf=\"!videoEnabled\">videocam_off</i>\n\t\t\t</ng-container>\n\t\t</div>\n\t\t<div id=\"agora_local\"></div>\n\t</div>\n\t<div class=\"agora_remote\" *ngFor=\"let remote of remoteCalls\" [id]=\"remote\">\n\n\t</div>\n</div>`,\n  styles: [`@import url(https://fonts.googleapis.com/icon?family=Material+Icons);p{font-family:Lato}.video-container{height:100vh;display:flex;flex-wrap:wrap;flex-direction:row;justify-content:center}.agora_local{background-color:#404040;height:250px;width:250px;border:1px solid #000;margin:8px}#agora_local{height:250px;width:250px;top:-28px}.agora_remote{background-color:#404040;height:250px;width:250px;border:1px solid #000;margin:8px}.video-buttons{width:250px;top:210px;position:relative;text-align:center;z-index:999}.video-buttons i{cursor:pointer}.endCall{color:red}.mic,.startCall{color:#fff}`]\n})\nexport class AgoraLocalComponent {\n\n  activeCall: boolean = false;\n  audioEnabled: boolean = true;\n  videoEnabled: boolean = true;\n  localStream: Stream\n  remoteCalls: any = [];\n\n  constructor(\n    private agoraService: AngularAgoraRtcService\n  ) {\n    this.agoraService.createClient();\n  }\n\n  startCall() {\n    this.activeCall = true;\n    this.agoraService.client.join(null, '1000', null, (uid) => {\n      this.localStream = this.agoraService.createStream(uid, true, null, null, true, false);\n      this.localStream.setVideoProfile('720p_3');\n      this.subscribeToStreams();\n    });\n  }\n\n  private subscribeToStreams() {\n    this.localStream.on(\"accessAllowed\", () => {\n      console.log(\"accessAllowed\");\n    });\n    // The user has denied access to the camera and mic.\n    this.localStream.on(\"accessDenied\", () => {\n      console.log(\"accessDenied\");\n    });\n\n    this.localStream.init(() => {\n      console.log(\"getUserMedia successfully\");\n      this.localStream.play('agora_local');\n      this.agoraService.client.publish(this.localStream, function (err) {\n        console.log(\"Publish local stream error: \" + err);\n      });\n      this.agoraService.client.on('stream-published', function (evt) {\n        console.log(\"Publish local stream successfully\");\n      });\n    }, function (err) {\n      console.log(\"getUserMedia failed\", err);\n    });\n\n    this.agoraService.client.on('error', (err) => {\n      console.log(\"Got error msg:\", err.reason);\n      if (err.reason === 'DYNAMIC_KEY_TIMEOUT') {\n        this.agoraService.client.renewChannelKey(\"\", () => {\n          console.log(\"Renew channel key successfully\");\n        }, (err) => {\n          console.log(\"Renew channel key failed: \", err);\n        });\n      }\n    });\n\n    this.agoraService.client.on('stream-added', (evt) => {\n      const stream = evt.stream;\n      this.agoraService.client.subscribe(stream, (err) => {\n        console.log(\"Subscribe stream failed\", err);\n      });\n    });\n\n    this.agoraService.client.on('stream-subscribed', (evt) => {\n      const stream = evt.stream;\n      if (!this.remoteCalls.includes(`agora_remote${stream.getId()}`)) this.remoteCalls.push(`agora_remote${stream.getId()}`);\n      setTimeout(() => stream.play(`agora_remote${stream.getId()}`), 2000);\n    });\n\n    this.agoraService.client.on('stream-removed', (evt) => {\n      const stream = evt.stream;\n      stream.stop();\n      this.remoteCalls = this.remoteCalls.filter(call => call !== `#agora_remote${stream.getId()}`);\n      console.log(`Remote stream is removed ${stream.getId()}`);\n    });\n\n    this.agoraService.client.on('peer-leave', (evt) => {\n      const stream = evt.stream;\n      if (stream) {\n        stream.stop();\n        this.remoteCalls = this.remoteCalls.filter(call => call === `#agora_remote${stream.getId()}`);\n        console.log(`${evt.uid} left from this channel`);\n      }\n    });\n  }\n  leave() {\n    this.agoraService.client.leave(() => {\n      this.activeCall = false;\n      document.getElementById('agora_local').innerHTML = \"\";\n      console.log(\"Leavel channel successfully\");\n    }, (err) => {\n      console.log(\"Leave channel failed\");\n    });\n  }\n\n  toggleAudio() {\n    this.audioEnabled = !this.audioEnabled;\n    if (this.audioEnabled) this.localStream.enableAudio();\n    else this.localStream.disableAudio();\n  }\n\n  toggleVideo() {\n    this.videoEnabled = !this.videoEnabled;\n    if (this.videoEnabled) this.localStream.enableVideo();\n    else this.localStream.disableVideo();\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { AgoraLocalComponent } from './agora-local.component';\nimport { AgoraConfig } from './AgoraConfig';\nimport { AngularAgoraRtcService } from './angular-agora-rtc.service';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [AgoraLocalComponent],\n  exports: [AgoraLocalComponent]\n})\nexport class AngularAgoraRtcModule {\n  static forRoot(config: AgoraConfig): ModuleWithProviders{\n    return {\n      ngModule: AngularAgoraRtcModule,\n      providers: [AngularAgoraRtcService, {provide: 'config', useValue: config}]\n    };\n  }\n }\n","export class AgoraClient {\n    aesMode: string;\n    aespassword: string;\n    configPublisher: any; // function\n    disableDualStream: any; // function\n    enableDualStream: any; // function\n    gatewayClient: {}; // add object\n    highStream: any; // ? type\n    highStreamState: number;\n    init: any; // function\n    isDualStream: boolean;\n    join: any; // function\n    key: any; // ? string\n    leave: any; // function\n    lowStream: any; // ?\n    lowStreamParameter: any // ?\n    lowStreamState: number;\n    on: any; // function\n    proxyServer: any; // ?\n    publish: any; // function\n    renewChannelKey: any; // function\n    setEncryptionMode: any; // function\n    setEncryptionSecret: any; // function\n    setLiveTranscoding: any; // function\n    setLowStreamParameter: any; // function\n    setProxyServer: any; // function\n    setRemoteVideoStreamType: any; // function\n    setTurnServer: any; // function\n    startLiveStreaming: any; // function\n    stopLiveStreaming: any; // function\n    subscribe: any; // function\n    turnServer: any; // function\n    unpublish: any; // function\n    unsubscribe: any; // function\n  }","export class Stream {\n    addEventListener: any; // function\n    audio: boolean;\n    audioEnabled: boolean;\n    audioLevelHelper: any // ?\n    aux_stream: any; // ?\n    close: any; // function \n    disableAudio: any; // function\n    disableVideo: any; // function\n    dispatchEvent: any; // function\n    dispatchSocketEvent: any; // function\n    dispatcher: any; // event listener\n    enableAudio: any; // function\n    enableVideo: any; // function\n    getAttributes: any; // function\n    getAudioLevel: any; // function\n    getId: any; // function\n    getStats: any; // function\n    hasAudio: any; // function\n    hasScreen: any; // function\n    hasVideo: any; // function\n    init: any; // function\n    initialized: boolean;\n    isAudioOn: any; // function\n    isVideoOn: any; // function\n    local: boolean;\n    lowStream: any; //?\n    mirror: boolean;\n    muteAudio: any; // ?\n    muteVideo: any; // ?\n    on: any; // function\n    onClose: any // ?\n    params:\n        { streamID: number, audio: boolean, cameraId: string, microphoneId: string, video: boolean }\n    play: any; // function\n    player: any; // ?\n    removeEventListener: any; // function\n    screen: boolean;\n    screenAttributes: { width: number, height: number, maxFr: number, minFr: number }\n    setScreenProfile: any; // function\n    setVideoBitRate: any; // function\n    setVideoFrameRate: any; // function\n    setVideoProfile: any; // function\n    setVideoProfileCustom: any; // function\n    setVideoProfileCustomPlus: any; // function\n    setVideoResolution: any; // function\n    stop: any; // function\n    streamLanyl // ?\n    streamId: number;\n    unmuteAudio: any; // ?\n    unmuteVideo: any; // ?\n    url: any; //?\n    video: boolean;\n    videoEnabled: boolean;\n    videoHeight: number;\n    videoSize: Array<number>\n    videoWidth: number;\n}","export class Device {\n    deviceId:string;\n    groupId:string;\n    kind:string;\n    label:string;\n}"]}